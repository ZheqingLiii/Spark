package assignment4;

import org.apache.spark.SparkConf;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import scala.Tuple2;

import java.util.ArrayList;
import java.util.Arrays;

public class DOctect {
    private static String millis = null;

    public static void main(String[] args) throws Exception {

        // Create the context with a 5 second batch size
        SparkConf sparkConf = new SparkConf().setAppName("DOctect").setMaster("local[2]");
        JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, Durations.seconds(5));

        // Create an input stream with the custom receiver on target ip:port and count the
        // words in input stream of \n delimited text (eg. generated by 'nc')
        JavaReceiverInputDStream<String> packets = ssc.receiverStream(
                new CustomReceiverDoctect("localhost", Integer.parseInt("9999")));

        //save data using JavaPairDStream, use time as the key


        //add count 1 for each time
        //key: time, value: array(doctect, 1)
        JavaPairDStream<String, ArrayList<Integer>> gather = packets.mapToPair(s ->
                new Tuple2<>(s.split(",")[0],
                        new ArrayList<>(Arrays.asList(Integer.parseInt(s.split(",")[1]), 1))));

        //add doctect and count for each minute
        //key: time, value: array(sum of doctect, count)
        JavaPairDStream<String, ArrayList<Integer>> sumVal = gather.reduceByKey((i1, i2) ->
                new ArrayList<>(Arrays.asList(i1.get(0) + i2.get(0), i1.get(1) + i2.get(1))));

        //calculate average doctect
        //key: time, value: average
        JavaPairDStream<String, String> avgVal = sumVal.mapToPair(s ->
                new Tuple2<>(s._1, "avg: " + s._2.get(0) / s._2.get(1)));


        //average
        //key: time, value: average of doctect
//        JavaPairDStream<String, String> avgVal = packets.mapToPair(s ->
//                new Tuple2<>(s.split(",")[0],
//                        new ArrayList<>(Arrays.asList(Integer.parseInt(s.split(",")[1]), 1)))).
//                reduceByKey((i1, i2) ->
//                        new ArrayList<>(Arrays.asList(i1.get(0) + i2.get(0), i1.get(1) + i2.get(1)))).
//                mapToPair(s ->
//                        new Tuple2<>(s._1, "avg: " + s._2.get(0) / s._2.get(1)));

        //max
        //key: time, value: max
        JavaPairDStream<String, String> maxVal = packets.mapToPair(s ->
                new Tuple2<>(s.split(",")[0], Integer.parseInt(s.split(",")[1]))).
                reduceByKey(Math::max).mapToPair(s -> new Tuple2<>(s._1, "max: " + s._2));

        //print results
        avgVal.print();
        maxVal.print();

        //store output into files
//        avgVal.foreachRDD(rdd -> {
//            millis = Long.toString(System.currentTimeMillis());
//            rdd.saveAsTextFile("/Users/lizheqing/Downloads/dOtect/avg" + millis);
//        });
//
//        maxVal.foreachRDD(rdd -> {
//            millis = Long.toString(System.currentTimeMillis());
//            rdd.saveAsTextFile("/Users/lizheqing/Downloads/dOtect/max" + millis);
//        });

        ssc.start();
        ssc.awaitTermination();
    }

}
